@page "/Rides/OfferRide"
@using CarPoolHTLVB.Components.Account.Shared
@using CarPoolHTLVB.Data
@using Microsoft.AspNetCore.Authorization
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using CarPoolHTLVB.Components.Account; 
@rendermode InteractiveServer
@inject RideStore Store;
@inject ApplicationUser User;
@inject IdentityRedirectManager RedirectManager
@inject NavigationManager NaviManager;
@attribute [Authorize] 
 

<PageTitle>Offer a Ride</PageTitle>

<AuthorizeView Roles="User,Admin">
    <Authorized>
        <div>
            <section> 
                <EditForm Context="editFormContext" Model="CurrentRideModel" OnValidSubmit="TryStoreRideOnValidSubmit" FormName="offerride">
                    <DataAnnotationsValidator />
                    <h1>Prepare your ride...</h1>
                    <hr />
                    <ValidationSummary class="text-danger" role="alert" />
                    <!-- For ClassmatesCanJoin -->
                    <div >
                        <div class="form-floating mb-3">
                            <InputText @bind-Value="CurrentRideModel.LocationFrom" class="form-control" placeholder="I drive from..." />
                            <label for="CurrentRideModel.LocationFrom" class="form-label">I drive from...</label>
                            <ValidationMessage For="() => CurrentRideModel.LocationFrom" class="text-danger" />
                        </div>
                    </div>
                    <!-- For ClassmatesCanJoin -->
                    <div class="form-floating mb-3 row">
                        <div class="form-floating mb-3">
                            <InputText @bind-Value="CurrentRideModel.LocationTo" class="form-control" placeholder="I drive from..." />
                            <label for="CurrentRideModel.LocationTo" class="form-label">to this destination...</label>
                            <ValidationMessage For="() => CurrentRideModel.LocationTo" class="text-danger" />
                        </div>
                    </div>
                    <!-- For DepartureTime -->
                    <div class="form-floating mb-3 row">
                        <div class="form-floating mb-3">
                            <InputDate Type="InputDateType.DateTimeLocal" @bind-Value="CurrentRideModel.DepartureTime" class="form-control" placeholder="Departure time" />
                            <label class="form-label">to this destination...</label>
                            <ValidationMessage For="() => CurrentRideModel.DepartureTime" class="text-danger" />
                        </div>
                    </div>

                    <!-- For ArrivalTime -->
                    <div class="form-floating mb-3 row">
                        <div class="form-floating mb-3">
                            <InputDate Type="InputDateType.DateTimeLocal" @bind-Value="CurrentRideModel.ArrivalTime" class="form-control" placeholder="Arrival time" />
                            <label>Arrival time</label>
                            <ValidationMessage For="() => CurrentRideModel.ArrivalTime" class="text-danger" />
                        </div>
                    </div>

                    <!-- For ClassmatesCanJoin -->
                    <div class="form-floating mb-3 row">
                        <div class="form-check">
                            <label>
                                <input title="Classmates are welcome" type="checkbox" id="ClassmatesCanJoin" @bind="ClassmatesCanJoin">
                                Classmates are welcome...
                            </label>
                        </div>
                    </div>

                    <!-- For TeachersCanJoin -->
                    <div class="form-floating mb-3 row">
                        <div class="form-check">
                            <label>Teachers are welcome...</label>
                            <input type="checkbox" id="TeachersCanJoin" @bind="TeachersCanJoin" />
                        </div>
                    </div>
                    <!-- For VillagesPassed -->
                    <div class="form-floating mb-3">
                        <div class="form-floating mb-3">
                            <InputText @bind-Value="CurrentRideModel.VillagesPassed" class="form-control" placeholder="Enter villages that get passed:" />
                            <label class="form-label">Enter villages that get passed:</label>
                            <ValidationMessage For="() => CurrentRideModel.VillagesPassed" class="text-danger" />
                        </div>
                    </div>
                    <!-- For Seats -->
                    <div class="form-floating mb-3 row">
                        <div class="form-floating mb-3">
                            <InputNumber @bind-Value="CurrentRideModel.Seats" class="form-control" placeholder="How many seats" />
                            <label class="form-label">How many seats</label>
                            <ValidationMessage For="() => CurrentRideModel.Seats" class="text-danger" />
                        </div>
                    </div>

                    <!-- For Smoker -->
                    <div class="form-floating mb-3 row">
                        <div class="form-check">
                            <label>Are smokers welcome on your ride?</label>
                            <input type="checkbox" id="smoker" @bind="Smoker" />
                        </div>
                    </div>

                    <!-- For IsFree -->
                    <div class="form-floating mb-3 row">
                        <div class="form-check">
                            <label>Do you offer your ride for free?</label>
                            <input type="checkbox" id="isFree" @bind="IsFree" />
                        </div>
                    </div>

                    <!-- For Frequency -->
                    <div class="form-floating mb-3">
                        <div class="form-floating mb-3">
                            <select id="frequency" @bind="CurrentRideModel.Frequency" class="form-select">                                <option value="Daily">Daily</option>
                                <option value="Weekly">Weekly</option>
                                <option value="Monthly">Monthly</option>
                                <option value="OnlyOnce">Only Once</option>
                            </select>
                            <label class="form-label">Choose the frequency of your ride</label>
                            <ValidationMessage For="() => CurrentRideModel.Frequency" class="text-danger" />
                        </div>
                    </div>

                    <div class="form-floating mb-3">
                        <div class="form-floating mb-3">
                            <button type="submit" class="button" role="button">Offer Ride</button>
                        </div>
                    </div>
                </EditForm>
            </section>
        </div>
    </Authorized>
    <NotAuthorized>
        <p>You must be logged in to offer a ride.</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    private string? errorMessage;
    private bool ClassmatesCanJoin { get; set; } = true;
    public bool TeachersCanJoin { get; set; } = true;

    public bool Smoker { get; set; } = false;

    public bool IsFree { get; set; } = true;

    private RideModel CurrentRideModel = new RideModel();

    private void TryStoreRideOnValidSubmit()
    {
        CurrentRideModel.OffererID = User.Id;
        if (!ClassmatesCanJoin) CurrentRideModel.ClassmatesCanJoin = "false";
        if (!TeachersCanJoin) CurrentRideModel.TeachersCanJoin = "false";
        if (!IsFree) CurrentRideModel.IsFree = "false";
        if (Smoker) CurrentRideModel.Smoker = "true";

        //Fix: Ride.properties = null
        if (Store.SaveRide(CurrentRideModel))
        {
            // Fix: wirft exception

            NaviManager.NavigateTo("/Counter");

        }
        else
        {
            NaviManager.NavigateTo("/Weahter");
        }

    }
    public class RideModel
    {

        public string OffererID { get; set; }

        public string LocationFrom { get; set; }

        public string LocationTo { get; set; }

        public DateTime DepartureTime { get; set; } = DateTime.Now;

        public DateTime ArrivalTime { get; set; } = DateTime.Now;
         
        public string VillagesPassed { get; set; } 

        public string ClassmatesCanJoin { get; set; } = "true"; 

        public string TeachersCanJoin { get; set; } = "true";

        public int Seats { get; set; }

        public string Smoker { get; set; } = "false";

        public string IsFree { get; set; } = "true"; 
        public string Frequency { get; set; }

    }
}

