@page "/Rides/OfferRide"
@using CarPoolHTLVB.Components.Account.Shared
@using CarPoolHTLVB.Data
@using Microsoft.AspNetCore.Authorization
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using CarPoolHTLVB.Components.Account; 
@using Microsoft.AspNetCore.Identity.EntityFrameworkCore
@rendermode InteractiveServer
@inject RideStore Store
@inject ApplicationUser User;
@inject IdentityRedirectManager RedirectManager
@inject NavigationManager NaviManager;
@attribute [Authorize] 
 

<PageTitle>Offer a Ride</PageTitle>

<AuthorizeView Roles="User,Admin">
    <Authorized>
        <div>
			<section>
				<EditForm Context="editFormContext" Model="CurrentRideModel" OnValidSubmit="TryStoreRideOnValidSubmit" FormName="offerride">
					<DataAnnotationsValidator />
					<h1>Prepare your ride...</h1>
					<hr class="hrStyle" />
					<ValidationSummary class="text-danger" role="alert" />
					<center>
						<div class="textfields">
							<!-- For ClassmatesCanJoin -->
							<div>
								<div class="form-floating mb-3">
									<InputText @bind-Value="CurrentRideModel.LocationFrom" class="form-control" placeholder="I drive from..." />
									<label for="CurrentRideModel.LocationFrom" class="form-label">I drive from...</label>
									<ValidationMessage For="() => CurrentRideModel.LocationFrom" class="text-danger" />
								</div>
							</div>

							<!-- For ClassmatesCanJoin -->
							<div>
								<div class="form-floating mb-3">
									<InputText @bind-Value="CurrentRideModel.LocationTo" class="form-control" placeholder="I drive from..." />
									<label for="CurrentRideModel.LocationTo" class="form-label">to this destination...</label>
									<ValidationMessage For="() => CurrentRideModel.LocationTo" class="text-danger" />
								</div>
							</div>
							<!-- For DepartureTime -->
							<div>
								<div class="form-floating mb-3">
									<InputDate Type="InputDateType.DateTimeLocal" @bind-Value="CurrentRideModel.DepartureTime" class="form-control" placeholder="Departure time" />
									<label class="form-label">DepartureTime</label>
									<ValidationMessage For="() => CurrentRideModel.DepartureTime" class="text-danger" />
								</div>
							</div>

							<!-- For ArrivalTime -->
							<div>
								<div class="form-floating mb-3">
									<InputDate Type="InputDateType.DateTimeLocal" @bind-Value="CurrentRideModel.ArrivalTime" class="form-control" placeholder="Arrival time" />
									<label>Arrival time</label>
									<ValidationMessage For="() => CurrentRideModel.ArrivalTime" class="text-danger" />
								</div>
							</div>
							<!-- For VillagesPassed -->
							<div>
								<div class="form-floating mb-3">
									<InputText @bind-Value="CurrentRideModel.VillagesPassed" class="form-control" placeholder="Enter villages that get passed:" />
									<label class="form-label">Enter villages that get passed:</label>
									<ValidationMessage For="() => CurrentRideModel.VillagesPassed" class="text-danger" />
								</div>
							</div>
							<!-- For Seats -->
							<div>
								<div class="form-floating mb-3">
									<InputNumber @bind-Value="CurrentRideModel.Seats" class="form-control" placeholder="How many seats" />
									<label class="form-label">How many seats</label>
									<ValidationMessage For="() => CurrentRideModel.Seats" class="text-danger" />
								</div>
								<!-- For Frequency -->
								<div>
									<div class="form-floating mb-3">
										<select id="frequency" @bind="CurrentRideModel.Frequency" class="form-select">
											<option value="Daily">Daily</option>
											<option value="Weekly">Weekly</option>
											<option value="Monthly">Monthly</option>
											<option value="OnlyOnce">Only Once</option>
										</select>
										<label class="form-label">Choose the frequency of your ride</label>
										<ValidationMessage For="() => CurrentRideModel.Frequency" class="text-danger" />
									</div>
								</div>
							</div>
						</div>
					</center>
					<center>
					<table class="TableStyle">
						<tr>
							<th>
								<!-- For ClassmatesCanJoin -->
								<div class="CheckTitelStyle">
									<div class="checkbox-wrapper-2">
										<div>
											<a>Classmates are welcome</a>
										</div>
										<input type="checkbox" class="sc-gJwTLC ikxBAC">
									</div>
								</div>
							</th>
							<th>
								<!-- For TeachersCanJoin -->
								<div class="CheckTitelStyle">
									<div class="checkbox-wrapper-2">
										<div>
											<a>Teachers are welcome</a>
										</div>
										<input type="checkbox" class="sc-gJwTLC ikxBAC">
									</div>
								</div>
							</th>
						</tr>
					</table>
					</center>
					<center>
					<table class="TableStyle2">
						<tr>
							<th>
								<!-- For Smoker -->
								<div class="CheckTitelStyle">
									<div class="checkbox-wrapper-2">
										<div>
											<a>Smokers are Welcome</a>
										</div>
										<input type="checkbox" class="sc-gJwTLC ikxBAC">
									</div>
								</div>
							</th>
							<th>
								<!-- For IsFree -->
								<div class="CheckTitelStyle">
									<div class="checkbox-wrapper-2">
										<div>
											<a>Is the ride free</a>
										</div>
										<input type="checkbox" class="sc-gJwTLC ikxBAC">
									</div>
								</div>
							</th>
						</tr>
					</table>
					</center>
					<div class="form-floating mb-3">
						<div class="form-floating mb-3">
							<button type="submit" class="button" role="button">Offer Ride</button>
						</div>
					</div>
				</EditForm>
			</section>
		</div>
	</Authorized>
	<NotAuthorized>
		<p>You must be logged in to offer a ride.</p>
	</NotAuthorized>
</AuthorizeView>

@code {
	private string? errorMessage;
	private bool ClassmatesCanJoin { get; set; } = true;
	public bool TeachersCanJoin { get; set; } = true;

	public bool Smoker { get; set; } = false;

    public bool IsFree { get; set; } = true; 

    private OfferRideModel CurrentRideModel = new OfferRideModel();

	private void TryStoreRideOnValidSubmit()
	{
		CurrentRideModel.OffererID = User.Id;
		if (!ClassmatesCanJoin) CurrentRideModel.ClassmatesCanJoin = "false";
		if (!TeachersCanJoin) CurrentRideModel.TeachersCanJoin = "false";
		if (!IsFree) CurrentRideModel.IsFree = "false";
		if (Smoker) CurrentRideModel.Smoker = "true";

        //Fix: Ride.properties = null
        if (Store.SaveRide(CurrentRideModel))
        { 
            //vl anzeigen dass funktioneirt hat und gespeichert hat was mit javascript?
            // oder redirecten zu MyOfferedRides oder sowos
            NaviManager.NavigateTo("/Counter");

		}
		else
		{
			NaviManager.NavigateTo("/Rides/OfferRide");
		}

    }
    public class OfferRideModel
    {
        public string? OffererID { get; set; }
        [Required] 
        public string? LocationFrom { get; set; }

        [Required] 
        public string? LocationTo { get; set; }

		public DateTime DepartureTime { get; set; } = DateTime.Now;

        public DateTime ArrivalTime { get; set; } = DateTime.Now;

        public string? VillagesPassed { get; set; } 

		public string ClassmatesCanJoin { get; set; } = "true";

		public string TeachersCanJoin { get; set; } = "true";

		public int Seats { get; set; }

		public string Smoker { get; set; } = "false";

        public string IsFree { get; set; } = "true"; 
        [Required] 
        public string? Frequency { get; set; }

    }

}

