@page "/Rides/SearchForRide"
@inject AuthenticationStateProvider AuthService
@using CarPoolHTLVB.Components.Account.Shared
@using CarPoolHTLVB.Data
@using Microsoft.AspNetCore.Authorization
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using CarPoolHTLVB.Components.Account; 
@rendermode InteractiveServer
@inject RideStore Store
@inject ApplicationUser User
@inject IdentityRedirectManager RedirectManager
@inject NavigationManager NaviManager
@attribute [Authorize] 
 

<PageTitle>Search For a Ride</PageTitle>

<AuthorizeView Roles="User,Admin">
    <Authorized>
        <div class="textfields">
            <section> 
                <EditForm Context="editFormContext" Model="CurrentRideModel" OnValidSubmit="SearchRidesOnValidSubmit" FormName="SearchForRide">
                    <DataAnnotationsValidator />
        <h1>Search for a ride...</h1>
        <hr class="hrStyle"/>  
        <center>
        <div class="textfields">
                    <div class="form-floating mb-3">
                        <InputText @bind-Value="CurrentRideModel.LocationFrom" class="form-control" placeholder="I drive from..." />
                        <label for="CurrentRideModel.LocationFrom" class="form-label">I drive from...</label>
                        <ValidationMessage For="() => CurrentRideModel.LocationFrom" class="text-danger" />
                    </div>
                    <div>
                        <div class="form-floating mb-3">
                            <InputText @bind-Value="CurrentRideModel.LocationTo" class="form-control" placeholder="I drive from..." />
                            <label for="CurrentRideModel.LocationTo" class="form-label">I drive to...</label>
                            <ValidationMessage For="() => CurrentRideModel.LocationTo" class="text-danger" />
                        </div>
                    </div>
                    <div>
                        <div class="form-floating mb-3">
                            <InputDate Type="InputDateType.DateTimeLocal" @bind-Value="CurrentRideModel.DepartureTime" class="form-control" placeholder="Departure time" />
                            <label class="form-label">DepartureTime...</label>
                            <ValidationMessage For="() => CurrentRideModel.DepartureTime" class="text-danger" />
                        </div>
                    </div>
                        </div>
                    </center>
                    <center>
                    <table class="TableStyle">
                            <tr>
                                <th>
                                    <!-- For Smoker -->
                                    <div class="CheckTitelStyle">
                                        <div class="checkbox-wrapper-2">
                                            <div>
                                                <a>Smokers are Welcome</a>
                                            </div>
                                            <input type="checkbox" class="sc-gJwTLC ikxBAC">
                                        </div>
                                    </div>
                                </th>
                                <th>
                                    <!-- For IsFree -->
                                    <div class="CheckTitelStyle">
                                        <div class="checkbox-wrapper-2">
                                            <div>
                                                <a>Is the ride free</a>
                                            </div>
                                            <input type="checkbox" class="sc-gJwTLC ikxBAC">
                                        </div>
                                    </div>
                                </th>
                            </tr>
                        </table>
                    </center>
                    <div class="form-floating mb-3">
                        <div class="col-md-6">
                            <button type="submit" class="button">Search For Rides</button>
                        </div>
                    </div>

                </EditForm>
            </section>
        </div> 
            </center>
        @if (buttonclicked)@*(Store.Rides.Count != 0)*@
        {
            <hr class="hrStyle"/>
            <h1>Hey @curUser, look through all available rides...</h1>
            <div>
                <div class="container">
                    <button class="switch-button" @onclick="MoveLeft">⇚</button>
                        <div class="text-container-small" style="color: @textColors[0]">
                            <div style="height:50px"></div>
                            <pre>@texts[0]</pre>
                        </div>
                        <div class="text-container-large" style="color: @textColors[1]">
                        <div style="height:100px"></div>
                            <pre>@texts[1]</pre>
                        <button class="request-button">
                            Request a Ride
                        </button>
                    </div>
                        <div class="text-container-small" style="color: @textColors[2]">
                            <div style="height:50px"></div>
                            <pre>@texts[2]</pre>
                        </div>
                    <button class="switch-button" @onclick="MoveRight">⇛</button>
                </div>  
            </div>
        }
    </Authorized>
    <NotAuthorized>
        <p>You must be logged in to offer a ride.</p>
    </NotAuthorized>
</AuthorizeView> 
@code {
    private string? errorMessage;  
    private SearchForRideModel CurrentRideModel = new SearchForRideModel();
    public bool Smoker { get; set; } = false;

    public bool IsFree { get; set; } = true;
    private string[] texts = { $"Join on his ride\nto Vöcklabruck on \n20.01.2024 at 06:00 o'clock", "Join David on his ride\nto Salzburg on \n21.01.2024 at 15:00 o'clock", "Join Max on his ride\nto Linz on \n22.01.2024 at 12:00 o'clock" };
    private string[] textColors = { "black", "black", "black" }; 
    private string curUser { get; set; }


    private bool buttonclicked { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthService.GetAuthenticationStateAsync();
        string[] userString = authState.User.Identity.Name.Split("@");
        curUser = userString[0].Replace('.',' ').ToString();


    }

    private void MoveRight()
    {
        // Shift text and colors to the right
        string tempText = texts[texts.Length - 1];
        string tempColor = textColors[textColors.Length - 1]; 

        for (int i = texts.Length - 1; i > 0; i--)
        {
            texts[i] = texts[i - 1];
            textColors[i] = textColors[i - 1]; 
        }

        texts[0] = tempText;
        textColors[0] = tempColor; 
    }

    private void MoveLeft()
    {
        // Shift text and colors to the left
        string tempText = texts[0];
        string tempColor = textColors[0]; 

        for (int i = 0; i < texts.Length - 1; i++)
        {
            texts[i] = texts[i + 1];
            textColors[i] = textColors[i + 1]; 
        }

        texts[texts.Length - 1] = tempText;
        textColors[textColors.Length - 1] = tempColor; 
    }

    private void Request()
    { 
        Console.WriteLine("Request button clicked!");
    }
    private void SearchRidesOnValidSubmit()
    {
        buttonclicked = true;
        if (Store.GetRides(CurrentRideModel))
        {
            
        }
    }
    public class SearchForRideModel
    {
        public string? LocationFrom { get; set; } 
        public string? LocationTo { get; set; } 
        public DateTime DepartureTime { get; set; } = DateTime.Now; 
        public string Smoker { get; set; } = "false"; 
        public string IsFree { get; set; } = "true";

    }
     
}

