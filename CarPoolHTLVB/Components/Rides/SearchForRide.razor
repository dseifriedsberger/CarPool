@page "/Rides/SearchForRide"
@inject AuthenticationStateProvider AuthService
@using CarPoolHTLVB.Components.Account.Shared
@using CarPoolHTLVB.Data
@using Microsoft.AspNetCore.Authorization
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using CarPoolHTLVB.Components.Account;
@using static CarPoolHTLVB.Components.Rides.OfferRide.OfferRideModel
@rendermode InteractiveServer
@inject RideStore Store 
@inject IdentityRedirectManager RedirectManager
@inject NavigationManager NaviManager  
@inject Microsoft.AspNetCore.Identity.UserManager<CarPoolHTLVB.Data.ApplicationUser> UserManager


@attribute [Authorize]
<PageTitle>Search For a Ride</PageTitle>

<AuthorizeView Roles="User,Admin">
    <Authorized>
        <center>
            <div>
                <section>
                    <EditForm Context="editFormContext" Model="CurrentRideModel" OnValidSubmit="SearchRidesOnValidSubmit" FormName="SearchForRide">
                        <DataAnnotationsValidator />

                        <h1>Search for a ride...</h1>
                        <hr class="hrStyle" />
                        <center>
                            <div class="textfields">
                                <div class="form-floating mb-3">
                                    <InputText @bind-Value="CurrentRideModel.LocationFrom" class="form-control" placeholder="I drive from..." />
                                    <label for="CurrentRideModel.LocationFrom" class="form-label">I drive from...</label>
                                    <ValidationMessage For="() => CurrentRideModel.LocationFrom" class="text-danger" />
                                </div>
                                <div>
                                    <div class="form-floating mb-3">
                                        <InputText @bind-Value="CurrentRideModel.LocationTo" class="form-control" placeholder="I drive from..." />
                                        <label for="CurrentRideModel.LocationTo" class="form-label">I drive to...</label>
                                        <ValidationMessage For="() => CurrentRideModel.LocationTo" class="text-danger" />
                                    </div>
                                </div>
                                <div>
                                    <div class="form-floating mb-3">
                                        <InputDate Type="InputDateType.DateTimeLocal" @bind-Value="DepartureTime" class="form-control" placeholder="Departure time" />
                                        <label class="form-label">DepartureTime...</label>
                                        <ValidationMessage For="() => CurrentRideModel.DepartureTime" class="text-danger" />
                                    </div>
                                </div>
                            </div>
                        </center>
                        <center>
                            <table class="TableStyle">
                                <tr>
                                    <th>
                                        <!-- For Smoker -->
                                        <div class="CheckTitelStyle">
                                            <div class="checkbox-wrapper-2">
                                                <div>
                                                    <a>Smokers are Welcome</a>
                                                </div>
                                                <input type="checkbox" class="sc-gJwTLC ikxBAC" @bind="Smoker">
                                            </div>
                                        </div>
                                    </th>
                                    <th>
                                        <!-- For IsFree -->
                                        <div class="CheckTitelStyle">
                                            <div class="checkbox-wrapper-2">
                                                <div>
                                                    <a>Is the ride free</a>
                                                </div>
                                                <input type="checkbox" class="sc-gJwTLC ikxBAC" @bind="IsFree">
                                            </div>
                                        </div>
                                    </th>
                                </tr>
                            </table>
                        </center>
                        <div class="form-floating mb-3">
                            <div class="col-md-6">
                                <button type="submit" class="button">Search For Rides</button>
                            </div>
                        </div>

                    </EditForm>
                </section>
            </div>
        </center>
        @if (Store.Rides != null)
        {
            <hr class="hrStyle" />
            <h1>Hey @curUser, look through all available rides...</h1>
            <div>
                <div class="container">
                    <button class="switch-button" @onclick="MoveLeft">⇚</button>
                    <div class="text-container-small" style="color: @textColors[0]">
                        <div style="height:50px"></div>
                        <pre>@displayedMessage[0]</pre>
                    </div>
                    <div class="text-container-large" style="color: @textColors[1]">
                        <div style="height:100px"></div>
                        <pre>@displayedMessage[1]</pre>
                        <button class="request-button">
                            Request a Ride
                        </button>
                    </div>
                    <div class="text-container-small" style="color: @textColors[2]">
                        <div style="height:50px"></div>
                        <pre>@displayedMessage[2]</pre>
                    </div>
                    <button class="switch-button" @onclick="MoveRight">⇛</button>
                </div>
            </div>
            <div>
                <label>@errorMessage</label>
            </div>
        }
    </Authorized>
    <NotAuthorized>
        <p>You must be logged in to offer a ride.</p>
    </NotAuthorized>
</AuthorizeView>
@code {
    private DateTime DepartureTime = DateTime.Now;
    private string? errorMessage;
    private SearchForRideModel CurrentRideModel = new SearchForRideModel();
    public bool Smoker { get; set; } = false;
    private int msgIndex { get; set; } = 1;
    public bool IsFree { get; set; } = true;
    private string[] displayedMessage {get;set;}
    private string[] textColors = { "black", "black", "black" };
    private string curUser { get; set; }
    private List<Message> messages { get; set; } = new();

    private bool buttonclicked { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthService.GetAuthenticationStateAsync();
        string[] userString = authState.User.Identity.Name.Split("@");
        curUser = userString[0].Replace('.', ' ').ToString();
        displayedMessage = new string[3];
    }

    private void MoveRight()
    {  
        msgIndex++;
        if (msgIndex > messages.Count - 2)
        {
            msgIndex = 0;
        } 
        UpdateMsgTexts();
        string tempText = displayedMessage[displayedMessage.Length - 1];
        string tempColor = textColors[textColors.Length - 1];

        for (int i = displayedMessage.Length - 1; i > 0; i--)
        {
            displayedMessage[i] = displayedMessage[i - 1];
            textColors[i] = textColors[i - 1];
        }

        displayedMessage[0] = tempText;
        textColors[0] = tempColor;
    }

    private void MoveLeft()
    {
        msgIndex--;
        if (msgIndex < 1)
        {
            msgIndex = messages.Count - 1;  
        }
        UpdateMsgTexts();
        string tempText = displayedMessage[0];
        string tempColor = textColors[0];

        for (int i = 0; i < displayedMessage.Length - 1; i++)
        {
            displayedMessage[i] = displayedMessage[i + 1];
            textColors[i] = textColors[i + 1];
        }

        displayedMessage[displayedMessage.Length - 1] = tempText;
        textColors[textColors.Length - 1] = tempColor;
    }

    private void Request()
    {
        Console.WriteLine("Request button clicked!");
    }
    private void SearchRidesOnValidSubmit()
    {
        Store.Rides = null;
        buttonclicked = true;
        if (Store.GetRides2(CurrentRideModel))
        {
            CreateMessage();
        }
    } 
    private void UpdateMsgTexts()
    {
        displayedMessage[0] = $"Join {messages[msgIndex-1].Username} on his ride\nto {messages[msgIndex-1].LocationTo} on \n{messages[msgIndex-1].DepartureTime}";
        displayedMessage[1] = $"Join {messages[msgIndex].Username} on his ride\nto {messages[msgIndex].LocationTo} on \n{messages[msgIndex].DepartureTime}";
        displayedMessage[2] = $"Join {messages[msgIndex+1].Username} on his ride\nto {messages[msgIndex+1].LocationTo} on \n{messages[msgIndex+1].DepartureTime}";
    }
    private async Task CreateMessage()
    {
        List<OfferRide.OfferRideModel> list = Store.Rides; 
        for (int i = 0; i < list.Count; i++)
        {   
            IdentityUser user = await UserManager.FindByIdAsync(list[i].OffererID);

            if (user != null)
            {
                string[] splitUserName = user.UserName.Split('@');
                string username = splitUserName[0];
                username = username.Replace('.', ' ');
                messages.Add( new Message(username, CurrentRideModel.LocationTo, list[i].DepartureTime));
            }
            else
            {
                continue;
            } 
        }
        UpdateMsgTexts();
        StateHasChanged();
    }

    public class Message
    {
        public string Username { get; set; } = "";
        public string LocationTo { get; set; } = "";
        public string DepartureTime { get; set; } = "";
        public Message(string username, string locationTo, string departureTime)
        {
            Username = username;
            LocationTo = locationTo;
            DepartureTime = departureTime;
        }
    }

    public class SearchForRideModel
    {
        public int RideId { get; set; }
        public string? LocationFrom { get; set; }
        public string? LocationTo { get; set; }
        public string DepartureTime { get; set; } 
        public string Smoker { get; set; } = "false";
        public string IsFree { get; set; } = "true";

    }

}

